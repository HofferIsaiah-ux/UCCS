			Unix Commands 
1. Create, edit, and view files and info about files 
	vim - basic editor 
	touch - poke at a file to create it or update its timestamp 
	head - display first few lines of a file
	cat - display all contents of a file  
	tail - display last few lines of a file 
	ls -I / file - display file info 
	echo - create a file, use > and >> 
	
2. Copy, rename, remove files
	cp (-r) - Copy a file or directory 
	mv - Rename (move) a file or directory 
	rm (-r) - Remove a file or directory 

3. Search and Sort Files 
	grep (Golbal Regular Expression Print) - Search for a pattern of characters in a file 
	sort - Sort a file
		sort fileName > sortedFile 
			> direct changed contents to new file (sortedFile) 
			| go from on command to another 
				grep "hello" fileName | sort
					^ will find files with hello then sort the outputs

4. The Working Directory 
	pwd - Display the path to the working directory
	cd - Change the working directory
	cd ~ - Change to the home directory 

5. Create and Delete Directories, And Show Their Contents 
	mkdir - Create/Make a directory
	rmdir - Remove a directory (If Empty) 
	ls - List the contents of a directory

6. Streams 
	Stdin - input stream , connected to keyboard 
	Stdout - output stream , connected to screen
	stderr - error output stream , connected to screen
			Helpful Syntax Descriptions 
		*Stdin can be connected to the contents of a file with the input operator ( < )
			cmd < file
		*Stdin can be connected to an upstream command with the pipe operator ( | )
			upstream_cmd | cmd
		*stderr can be connected to a file,using a redirection operator ( 2> )
			cmd 2> error-log-file

7. Directory Shortcuts 
	~ - Means /home/user-name
	cd ~ or cd - both change working directory to home directory
	cd ~/dir1 - Chnages working directory to home/user-name/dir1
	cd - - Changes working directory to the previous working directory
	$HOME - Environment variable containing home directoryâ€™s absolute path
	. - The current working directory
	.. - The parent directory of the current working directory
	
8. File Globbing 
	glob - short for global 
		*used in echo, ls, grep, cp, mv, rm, touch, case statements 

	Glob Wildcards 
		* - Any number of characters
		? - Matches any single character
		[] - Matches a single character with any of the characters between the braces
			*use hyphen to indicate range: [a-z:A-M] or [0-5:a-z]
		!Negates a character range within brackets 
			*[!a-z], matches any single character not in the a-z range 
	Examples
		ls *.txt - List at files ending with .txt
		echo myFile* - Prints names of all files starting with myFile 
		ls myFile?.txt - List as file named myFile with only ONE random character
		grep "hello" [A-Z]*.txt - Matches any .txt file name that starts with a single uppercase letter, and then look for "hello" within these files
		cat *[!0-9].txt - prints contents of all .txt files whose names do not end with a number 

9. Ls Addons
		*Can Combine Together 
	-a or --all - show hidden and non-hidden files 
	-A or --almost-all - Show hidden and non-hidden files, but skip . and .. directories 
	-l or --formnat=long - show long listing 
	-F or --classify - Add indicator character to each entry in the output 
		Inidcator Characters: 
			/ directory
			@ symbolic link
			| named pipe 
			= socket 
			* executable 
			  blank means file 
	-R or --recursive - List directoriesand their contents recursively 
	-d or --directory - list directories but not contents 
	-i or --inode - List the inode number for each file
		inode number is the identity number of the file within a filesystem
	-h or --human-readable - Print sizes in kilobytes and megabytes 
10. Hard and Soft Links
		Ln - creates hardlink to file
		ln -s - creates softlink to file
			ln fileName softLinkFileName 
			
11. Current User 
		ps -u $(whoami) - shows who owns current processes, static version 
		top - current, live version, starts screen based display of current processes
		
12. Stop processes 
	kill -9 processeName - stop processe
	
12. Variables 
		*Value Is A String By Default 
		* Do Not Use Spaces 
		variableName=something
		echo $variableName - will display value held 
		declare -i - Makes Value Held An Integer 
			declare -i answer = 42; answer = $((answer + 10)): echo $answer -> 52
		declare -a - makes an array 
			arrayName[index] - indexing array
			echo "${arrayName[i]}" - display value at index 
				use @ to display all array values 
					arrayName[@]
		declare -A - creates an associative array 
			- Keys are strings 
				-arrayName[String]= Value
		+= - Add to String or Value
		$VariableName - Same as +=, used inside added text
			variable="$diffVariable more text" 
		; - end command, write more command in on go 
				echo file; otherCommand; ...
		alias - create a new command 
			alias commandName='command'
		
		Shell And Environment Variables 
			Environment: 
				Scope: Accessible to current shell session and all child processes it started 
				Usage: Store data that programes and processes need, like settings or paths 
				Naming: uppercase 
				Persistence: Made persistent across sessions by setting them in configuration files, ~/.bashrc or ~./profile 
					Ex: export VARIABLE = "Hello"
						sh - c 'echo $VARIABLE'
						touch file_name.sh
						echo "echo $VARIABLE" >> file_name.sh
						sh file_name.sh
						Displays Text
			Shell:
				Scope: Only accessible within current shell session and its subshells 
				Usage: Used for temporary data storage and manipulation within the shell 
				Naming: lowercase 
				Persistence: Does not persist, has to be remade after new shell session 
				
		Command And Process List 
			Command List {}: 
				{} - multiple commands on one line, need space after {
					*helpful for >, put all info on line into file
					*Effect current shell outside of {}, 
						saves variable changes 
			Process List (): 
				() - commands on line are executed on subshell (seperate shell) 
					*Changes made to enviorment are only visible to subshell
					
			
13. Quotations 
	'' - no expation 
	"" - does expand